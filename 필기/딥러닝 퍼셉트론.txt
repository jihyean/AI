# Perceptron AND
import numpy as np
def AND_Python(x1, x2): #python
   w1, w2, theta = 0.5, 0.5, 0.7
   temp = x1 * w1 + x2 * w2 
   if temp <= theta:
     return 0
   else:
     return 1

def AND(x1, x2): #using Numpy
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5]) #fixwd weighted value w1, w2
  b = -0.7 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron AND Logic')


print('(0,0)=', AND(0,0))
print('(0,1)=', AND(0,1))
print('(1,0)=', AND(1,0))
print('(1,1)=', AND(1,1))

################################################################################################

# Perceptron AND
import numpy as np
def AND_Python(x1, x2): #python
   w1, w2, theta = 0.5, 0.5, 0.7
   temp = x1 * w1 + x2 * w2 
   if temp <= theta:
     return 0
   else:
     return 1

def AND(x1, x2): #using Numpy
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5]) #fixwd weighted value w1, w2
  b = -0.7 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron AND Logic')


print('(0,0)=', AND(0,0))
print('(0,1)=', AND(0,1))
print('(1,0)=', AND(1,0))
print('(1,1)=', AND(1,1))

def NAND(x1, x2): #NAND is Not AND Logic
  x = np.array([x1, x2])
  w = np.array([-0.5, -0.5]) #fixwd weighted value w1, w2
  b = 0.7 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron NAND Logic')


print('(0,0)=', NAND(0,0))
print('(0,1)=', NAND(0,1))
print('(1,0)=', NAND(1,0))
print('(1,1)=', NAND(1,1))

def OR(x1, x2): #OR Logic
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5]) #fixwd weighted value w1, w2
  b = -0.2 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron OR Logic')


print('(0,0)=', OR(0,0))
print('(0,1)=', OR(0,1))
print('(1,0)=', OR(1,0))
print('(1,1)=', OR(1,1))

def XOR(x1, x2): #XOR Logic
  s1 = NAND(x1, x2)
  s2 = OR(x1, x2)
  y = AND(s1, s2)
  if y <= 0:
    return 0
  else:
    return 1
     
print('Perceptron XOR Logic')


print('(0,0)=', XOR(0,0))
print('(0,1)=', XOR(0,1))
print('(1,0)=', XOR(1,0))
print('(1,1)=', XOR(1,1))

#######################################################################################
# Perceptron AND
import numpy as np
def AND_Python(x1, x2): #python
   w1, w2, theta = 0.5, 0.5, 0.7
   temp = x1 * w1 + x2 * w2 
   if temp <= theta:
     return 0
   else:
     return 1

def AND(x1, x2): #using Numpy
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5]) #fixwd weighted value w1, w2
  b = -0.7 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron AND Logic')


print('(0,0)=', AND(0,0))
print('(0,1)=', AND(0,1))
print('(1,0)=', AND(1,0))
print('(1,1)=', AND(1,1))

def NAND(x1, x2): #NAND is Not AND Logic
  x = np.array([x1, x2])
  w = np.array([-0.5, -0.5]) #fixwd weighted value w1, w2
  b = 0.7 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron NAND Logic')


print('(0,0)=', NAND(0,0))
print('(0,1)=', NAND(0,1))
print('(1,0)=', NAND(1,0))
print('(1,1)=', NAND(1,1))

def OR(x1, x2): #OR Logic
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5]) #fixwd weighted value w1, w2
  b = -0.2 #y= x1*w1 + x2 * w2 > theta...or <=
          #y= x1*w1 + x2 * w2 -theta 0...or <=

  tmp = np.sum(x*w)+b
  if tmp <= 0:
    return 0
  else:
    return 1
     
print('Perceptron OR Logic')


print('(0,0)=', OR(0,0))
print('(0,1)=', OR(0,1))
print('(1,0)=', OR(1,0))
print('(1,1)=', OR(1,1))

def XOR(x1, x2): #XOR Logic
  s1 = NAND(x1, x2)
  s2 = OR(x1, x2)
  y = AND(s1, s2)
  if y <= 0:
    return 0
  else:
    return 1
     
print('Perceptron XOR Logic')


print('(0,0)=', XOR(0,0))
print('(0,1)=', XOR(0,1))
print('(1,0)=', XOR(1,0))
print('(1,1)=', XOR(1,1))

x = np.array([1,2,3,4,5])
y = x > 3 #y=[False, False, True, True]

def step_function(x):
  return x>0
  #return np.array(x > 0, dtype= np.int)

print('x=', x, 'step_func=', step_function(x))

def sigmoid(x):
  return 1/(1+np.exp(-x))

print('x=', x, 'sigmoid=', sigmoid(x))

def ReLu(x):
  return np.maxium(0, x)#x>0일때는 x를 x<0일때는 0을 출력

print('x=', x, 'ReLu=', ReLu(x))

import matplotlib.pylab as plt

x= np.arange(-5, 5, 0.1)
y= step_function(x)
plt.plot(x, y)
plt.show()